//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;

use crate::entity::store;
use crate::entity::store_location_info_tbl;
use crate::entity::store_recommend_tbl;
use crate::entity::zero_possible_market;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "store")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub seq: i32,
    pub name: String,
    pub r#type: Option<String>,
    pub use_yn: Option<String>,
    pub reg_dt: DateTime,
    pub chg_dt: Option<DateTime>,
    pub reg_id: String,
    pub chg_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::zero_possible_market::Entity")]
    ZeroPossibleMarket,
    #[sea_orm(has_many = "super::store_recommend_tbl::Entity")]
    StoreRecommendTbl,
    #[sea_orm(has_one = "super::store_location_info_tbl::Entity")]
    StoreLocationInfoTbl,
}

impl Related<zero_possible_market::Entity> for store::Entity {
    fn to() -> RelationDef {
        Relation::ZeroPossibleMarket.def()
    }
}

impl Related<store_recommend_tbl::Entity> for store::Entity {
    fn to() -> RelationDef {
        Relation::StoreRecommendTbl.def()
    }
}

impl Related<store_location_info_tbl::Entity> for store::Entity {
    fn to() -> RelationDef {
        Relation::StoreLocationInfoTbl.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
